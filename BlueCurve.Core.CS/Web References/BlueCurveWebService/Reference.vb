'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34209
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34209.
'
Namespace BlueCurveWebService
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="BlueCurveWSSoap", [Namespace]:="http://BlueCurve.Core.WS/")>  _
    Partial Public Class BlueCurveWS
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private generic_object_transmissionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private excel_function_transmissionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.BlueCurve.Core.CS.My.MySettings.Default.BlueCurve_Core_CS_BlueCurveWebService_BlueCurveWS
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event generic_object_transmissionCompleted As generic_object_transmissionCompletedEventHandler
        
        '''<remarks/>
        Public Event excel_function_transmissionCompleted As excel_function_transmissionCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://BlueCurve.Core.WS/generic_object_transmission", RequestNamespace:="http://BlueCurve.Core.WS/", ResponseNamespace:="http://BlueCurve.Core.WS/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function generic_object_transmission(ByVal s As String) As String
            Dim results() As Object = Me.Invoke("generic_object_transmission", New Object() {s})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub generic_object_transmissionAsync(ByVal s As String)
            Me.generic_object_transmissionAsync(s, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub generic_object_transmissionAsync(ByVal s As String, ByVal userState As Object)
            If (Me.generic_object_transmissionOperationCompleted Is Nothing) Then
                Me.generic_object_transmissionOperationCompleted = AddressOf Me.Ongeneric_object_transmissionOperationCompleted
            End If
            Me.InvokeAsync("generic_object_transmission", New Object() {s}, Me.generic_object_transmissionOperationCompleted, userState)
        End Sub
        
        Private Sub Ongeneric_object_transmissionOperationCompleted(ByVal arg As Object)
            If (Not (Me.generic_object_transmissionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent generic_object_transmissionCompleted(Me, New generic_object_transmissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://BlueCurve.Core.WS/excel_function_transmission", RequestNamespace:="http://BlueCurve.Core.WS/", ResponseNamespace:="http://BlueCurve.Core.WS/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function excel_function_transmission(ByVal s As String, ByVal logged_on_user_id As String, ByVal os_user_name As String) As String
            Dim results() As Object = Me.Invoke("excel_function_transmission", New Object() {s, logged_on_user_id, os_user_name})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub excel_function_transmissionAsync(ByVal s As String, ByVal logged_on_user_id As String, ByVal os_user_name As String)
            Me.excel_function_transmissionAsync(s, logged_on_user_id, os_user_name, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub excel_function_transmissionAsync(ByVal s As String, ByVal logged_on_user_id As String, ByVal os_user_name As String, ByVal userState As Object)
            If (Me.excel_function_transmissionOperationCompleted Is Nothing) Then
                Me.excel_function_transmissionOperationCompleted = AddressOf Me.Onexcel_function_transmissionOperationCompleted
            End If
            Me.InvokeAsync("excel_function_transmission", New Object() {s, logged_on_user_id, os_user_name}, Me.excel_function_transmissionOperationCompleted, userState)
        End Sub
        
        Private Sub Onexcel_function_transmissionOperationCompleted(ByVal arg As Object)
            If (Not (Me.excel_function_transmissionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent excel_function_transmissionCompleted(Me, New excel_function_transmissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub generic_object_transmissionCompletedEventHandler(ByVal sender As Object, ByVal e As generic_object_transmissionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class generic_object_transmissionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub excel_function_transmissionCompletedEventHandler(ByVal sender As Object, ByVal e As excel_function_transmissionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class excel_function_transmissionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
